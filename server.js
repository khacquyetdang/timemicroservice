/******************************************************
* PLEASE DO NOT EDIT THIS FILE
* the verification process may break
* ***************************************************/

//'use strict';
var mongodb = require('mongodb');
const dateFormat = require('dateFormat');
var pathToRegexp = require('path-to-regexp')
var fs = require('fs');
var express = require('express');
var app = express();
var router = express.Router();
var shorturl = require('./routes/shorturl');

//We need to work with "MongoClient" interface in order to connect to a mongodb server.
var MongoClient = mongodb.MongoClient;

//(Focus on This Variable)
var url = process.env.MONGOLAB_URI;
console.log("mongolab url: ", url);

function isNumeric(num) {
  return !isNaN(num)
}

function isNumeric(num) {
  return !isNaN(num)
}
// Get client IP address from request object ----------------------
const getClientAddress = function (req) {
  return req.connection.remoteAddress || (req.headers['x-forwarded-for'] || '').split(',')[0];
};

if (!process.env.DISABLE_XORIGIN) {
  app.use(function (req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if (!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
      console.log(origin);
      res.setHeader('Access-Control-Allow-Origin', origin);
      res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));


app.route('/_api/package.json')
  .get(function (req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function (err, data) {
      if (err) return next(err);
      res.type('txt').send(data.toString());
    });
  });

app.route('/')
  .get(function (req, res) {
    res.sendFile(process.cwd() + '/views/index.html');
  });

app.get('/api/whoami/', function (req, res) {
  // var ifaces = os.networkInterfaces();
  var ipAdresse = req.rawHeaders[1];
  var _locale = req.headers['accept-language'].split(",")[0];
  console.log(req.rawHeaders);
  var os = req.headers['user-agent'].split(")")[0].split("(")[1];

  var ip = req.headers['x-forwarded-for'] !== undefined && req.headers['x-forwarded-for'] !== null ? req.headers['x-forwarded-for'].split(',')[0] : req.connection.remoteAddress;
  console.log("raw 7 " + req.rawHeaders[7]);
  var result = {
    "ipaddress": ip,
    "language": _locale,
    "software": os
  };
  console.log(result);
  res.send(result);
});
//https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)

//app.param("originalUrl", /(https|http)?(www)?$/);
//var router = app.router;
//app.param('range', /^(\w+)\.\.(\w+)?$/);

/*router.param('originalUrl', function(req,_, _, p){ 
  return p.match(/^(\w+)\.\.(\w+)?$/);
});*/



//app.get('/api/shorturl/new/:originalUrl', function (req, res) {

var regexp = pathToRegexp('https?:\/\/(www){0,1}');

var regexpRes = regexp.exec("http://wwwaaaaabbcc");
console.log("regexpRes : ", regexpRes);

//var newShortUrlRegex = /api\/shorturl\/new\/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/;

app.use('/api/shorturl/new/', shorturl);

app.route('/api/:time').get(function (req, res) {
  var time = req.params.time;
  var result = {
    "unix": null,
    "natural": null
  };
  var date = null;
  try {
    if (isNumeric(time)) {
      console.log("Is numeric");
      date = new Date(parseInt(time * 1000));
    }
    else {
      console.log("Not Is numeric: ", time);
      date = new Date(time);
    }
    result = {
      "unix": Math.floor(date.getTime() / 1000),
      "natural": dateFormat(date, 'mmmm dd, yyyy')
    };
  }
  catch (e) {
    console.log("erreur date format time", time, " erreur : ", e);
  }
  res.send(result);
});

// Respond not found to all the wrong routes
app.use(function (req, res, next) {
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function (err, req, res, next) {
  if (err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }
})

var port = process.env.PORT || 3000;
app.listen(port, function () {
  console.log('Node.js listening on port', port, "...");
});

